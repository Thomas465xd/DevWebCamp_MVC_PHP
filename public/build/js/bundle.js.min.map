{"version":3,"sources":["tags.js"],"names":["tagsInput","document","querySelector","tagsDiv","tagsInputHidden","tags","mostrarTags","textContent","forEach","tag","etiqueta","createElement","classList","add","onclick","eliminarTag","appendChild","value","join","evento","tagEliminar","target","trim","filter","split","addEventListener","keyCode","includes","toLowerCase","preventDefault"],"mappings":"CAAA,WAEA,MAAAA,EAAAC,SAAAC,cAAA,eAEA,GAAAF,EAAA,CAEA,MAAAG,EAAAF,SAAAC,cAAA,SACAE,EAAAH,SAAAC,cAAA,eAEA,IAAAG,EAAA,GAiCA,SAAAC,IACAH,EAAAI,YAAA,GAEAF,EAAAG,QAAAC,IACA,MAAAC,EAAAT,SAAAU,cAAA,MACAD,EAAAE,UAAAC,IAAA,mBACAH,EAAAH,YAAAE,EACAC,EAAAI,QAAAC,EACAZ,EAAAa,YAAAN,KAiBAN,EAAAa,MAAAZ,EAAAa,KAAA,KAZA,SAAAH,EAAAI,GACA,MAAAC,EAAAD,EAAAE,OAAAd,YAAAe,OAEAjB,EAAAA,EAAAkB,OAAAd,GAAAA,IAAAW,GAEAd,IAhDA,KAAAF,EAAAa,QACAZ,EAAAD,EAAAa,MAAAO,MAAA,KACAlB,KAIAN,EAAAyB,iBAAA,YAEA,SAAAN,GAEA,GAAA,KAAAA,EAAAO,QAAA,CAGA,GAAA,KAAAP,EAAAE,OAAAJ,MAAAK,QAAAH,EAAAE,OAAAJ,MAAA,GAAAZ,EAAAsB,SAAAR,EAAAE,OAAAJ,MAAAW,eAGA,OAFAT,EAAAU,sBACAV,EAAAE,OAAAJ,MAAA,IAIAE,EAAAU,iBAEAxB,EAAA,IAAAA,EAAAc,EAAAE,OAAAJ,MAAAK,QAEAtB,EAAAiB,MAAA,GAGAX,SAtCA","file":"bundle.js","sourcesContent":["(function () {\r\n\r\n    const tagsInput = document.querySelector('#tags_input');\r\n\r\n    if(tagsInput) {\r\n\r\n        const tagsDiv = document.querySelector(\"#tags\");\r\n        const tagsInputHidden = document.querySelector(\"[name=tags]\");\r\n\r\n        let tags = [];\r\n\r\n        // Recuperar del Input Oculto\r\n        if(tagsInputHidden.value !== \"\") {\r\n            tags = tagsInputHidden.value.split(\",\");\r\n            mostrarTags();\r\n        }\r\n\r\n        // Escuchar los cambios en el input\r\n        tagsInput.addEventListener('keypress', guardarTag);\r\n\r\n        function guardarTag(evento) {\r\n\r\n            if(evento.keyCode === 44) {\r\n\r\n                // Evitar que se agreguen tags repetidos y vacios\r\n                if(evento.target.value.trim() === \"\" || evento.target.value < 1 || tags.includes(evento.target.value.toLowerCase())) {\r\n                    evento.preventDefault();\r\n                    evento.target.value = \"\";\r\n                    return;\r\n                }\r\n\r\n                evento.preventDefault();\r\n\r\n                tags = [...tags, evento.target.value.trim()];\r\n\r\n                tagsInput.value = \"\";\r\n\r\n                //console.log(tags)\r\n                mostrarTags();\r\n            }\r\n        }\r\n\r\n        function mostrarTags() {\r\n            tagsDiv.textContent = \"\";\r\n\r\n            tags.forEach(tag => {\r\n                const etiqueta = document.createElement(\"LI\");\r\n                etiqueta.classList.add(\"formulario__tag\");\r\n                etiqueta.textContent  = tag;\r\n                etiqueta.onclick = eliminarTag;\r\n                tagsDiv.appendChild(etiqueta);\r\n            });\r\n            actualizarInputHidden();\r\n        }\r\n\r\n        function eliminarTag(evento) {\r\n            const tagEliminar = evento.target.textContent.trim();\r\n\r\n            tags = tags.filter(tag => tag !== tagEliminar);\r\n\r\n            mostrarTags(); // Mostrar de nuevo las etiquetas después de eliminar\r\n\r\n            // Si deseas ver el estado actual de los tags en la consola, descomenta la siguiente línea:\r\n            // console.log(tags);\r\n        }\r\n\r\n        function actualizarInputHidden() {\r\n            tagsInputHidden.value = tags.join(\",\");\r\n        }\r\n    }\r\n})()"]}