{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","addEventListener","terminoBusqueda","forEach","dia","busqueda","categoria_id","value","evento","target","name","horaPrevia","classList","remove","Object","values","includes","async","url","resultado","fetch","eventos","listadoHoras","li","add","horasTomadas","map","hora_id","Array","from","filter","dataset","horaId","console","log","horasDisponibles","horasNoDisponibles","hora","removeEventListener","seleccionarHora","obtenerHorasDisponibles","json","error","busquedaEventos","ponentesInput","ponentes","ponentesFiltrados","listadoPonentes","ponenteHidden","seleccionarPonente","ponente","ponentePrevio","ponenteId","respuesta","arrayPonentes","nombre","trim","apellido","id","formatearPonentes","obtenerPonentes","length","busquedaNormalizada","normalize","replace","toLowerCase","expresion","RegExp","search","firstChild","removeChild","ponenteHTML","createElement","textContent","onclick","appendChild","noEncontrado","mostrarPonentes","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","tag","etiqueta","eliminarTag","join","tagEliminar","split","keyCode","preventDefault"],"mappings":"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","file":"bundle.js","sourcesContent":["(function() {\r\n    const horas = document.querySelector(\"#horas\");\r\n\r\n    if (horas) {\r\n        const categoria = document.querySelector('[name=\"categoria_id\"]');\r\n        const dias = document.querySelectorAll('[name=\"dia\"]');\r\n        const inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\r\n        const inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\r\n\r\n        \r\n        categoria.addEventListener(\"change\", terminoBusqueda);\r\n        dias.forEach(dia => dia.addEventListener(\"change\", terminoBusqueda));\r\n        \r\n        let busqueda = {\r\n            categoria_id: +categoria.value || '',\r\n            dia: +inputHiddenDia.value || ''\r\n        }\r\n\r\n        function terminoBusqueda(evento) {\r\n            busqueda[evento.target.name] = evento.target.value;\r\n\r\n            // Reiniciar campos ocultos y el selector de hjoras\r\n            inputHiddenHora.value = \"\";\r\n            inputHiddenDia.value = \"\";\r\n\r\n            // Deseleccionar la hora previa, si hay un nuevo click\r\n            const horaPrevia = document.querySelector(\".horas__hora--seleccionada\");\r\n\r\n            if (horaPrevia) {\r\n                horaPrevia.classList.remove(\"horas__hora--seleccionada\");\r\n            }\r\n\r\n            // Verifica que ambos valores de búsqueda estén completos\r\n            if (Object.values(busqueda).includes('')) {\r\n                //console.log(\"Faltan datos\");\r\n                return;\r\n            }\r\n\r\n            //console.log(busqueda);\r\n\r\n            busquedaEventos();\r\n        }\r\n\r\n        async function busquedaEventos() {\r\n            const { dia, categoria_id } = busqueda;\r\n            const url = `/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`;\r\n\r\n            //console.log(url);\r\n\r\n            try {\r\n                const resultado = await fetch(url);\r\n                const eventos = await resultado.json();\r\n\r\n                //console.log(eventos);\r\n\r\n                obtenerHorasDisponibles(eventos);\r\n            } catch (error) {\r\n                console.error('Error al obtener eventos:', error);\r\n            }\r\n        }\r\n\r\n        function obtenerHorasDisponibles(eventos) {\r\n\r\n            // Reiniciar las horas\r\n            const listadoHoras = document.querySelectorAll(\"#horas li\");\r\n            listadoHoras.forEach(li => li.classList.add(\"horas__hora--deshabilitada\"));\r\n\r\n\r\n            // Comprobar eventos ya tomados\r\n            const horasTomadas = eventos.map(evento => evento.hora_id);\r\n            const listadoHorasArray = Array.from(listadoHoras);\r\n\r\n            // habilitar solo las horas disponibles\r\n            const resultado = listadoHorasArray.filter(li => !horasTomadas.includes(li.dataset.horaId));\r\n            resultado.forEach(li => li.classList.remove(\"horas__hora--deshabilitada\"));\r\n\r\n            console.log(resultado);\r\n            //console.log(listadoHoras)\r\n            //console.log(horasTomadas);\r\n\r\n            const horasDisponibles = document.querySelectorAll(\"#horas li:not(.horas__hora--deshabilitada)\");\r\n\r\n            const horasNoDisponibles = document.querySelectorAll('.horas__hora--deshabilitada');\r\n            Array.from(horasNoDisponibles).map(hora => {\r\n                hora.removeEventListener('click', seleccionarHora);\r\n            })  \r\n\r\n            horasDisponibles.forEach(hora => hora.addEventListener(\"click\", seleccionarHora));\r\n        }\r\n\r\n        function seleccionarHora(evento) {\r\n            // Deseleccionar la hora previa, si hay un nuevo click\r\n            const horaPrevia = document.querySelector(\".horas__hora--seleccionada\");\r\n            if (horaPrevia) {\r\n                horaPrevia.classList.remove(\"horas__hora--seleccionada\");\r\n            }\r\n\r\n            // Agregar clase de seleccionado\r\n            evento.target.classList.add(\"horas__hora--seleccionada\");\r\n\r\n            inputHiddenHora.value = evento.target.dataset.horaId;\r\n            //console.log(evento.target.dataset.horaId);\r\n\r\n            // Llenar el campo oculto de día\r\n            inputHiddenDia.value = document.querySelector('[name=\"dia\"]:checked').value;\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    const ponentesInput = document.querySelector('#ponentes');\r\n\r\n    if(ponentesInput) {\r\n        let ponentes = [];\r\n        let ponentesFiltrados = [];\r\n\r\n        const listadoPonentes = document.querySelector('#listado-ponentes');\r\n        const ponenteHidden = document.querySelector('[name=\"ponente_id\"]');\r\n\r\n        obtenerPonentes();\r\n\r\n        ponentesInput.addEventListener(\"input\", buscarPonentes);\r\n        \r\n        async function obtenerPonentes() {\r\n            const url = `/api/ponentes`;\r\n\r\n            const respuesta = await fetch(url);\r\n            const resultado = await respuesta.json();\r\n\r\n            //console.log(resultado);\r\n            formatearPonentes(resultado);\r\n        }\r\n\r\n        function formatearPonentes(arrayPonentes = []) {\r\n            ponentes = arrayPonentes.map(ponente => {\r\n                return {\r\n                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`,\r\n                    id: ponente.id\r\n                }\r\n            })\r\n\r\n            //console.log(ponentes) \r\n        }\r\n\r\n        function buscarPonentes(evento) {\r\n            const busqueda = evento.target.value;\r\n            //console.log(evento.target.value);\r\n\r\n            if(busqueda.length > 3) {\r\n\r\n                // Normalizar la búsqueda y eliminar las marcas diacríticas\r\n                const busquedaNormalizada = busqueda.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n                const expresion = new RegExp(busquedaNormalizada, 'i');\r\n\r\n                ponentesFiltrados = ponentes.filter(ponente => {\r\n                    const nombreNormalizado = ponente.nombre.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n                    if(nombreNormalizado.search(expresion) !== -1) {\r\n                        return ponente;\r\n                    }\r\n\r\n                    //console.log(ponentesFiltrados);\r\n                })\r\n            } else {\r\n                ponentesFiltrados = [];\r\n            }\r\n\r\n            mostrarPonentes();\r\n        }\r\n\r\n        function mostrarPonentes() {\r\n\r\n            //Mala solucion\r\n            //listadoPonentes.innerHTML = '';\r\n\r\n            while(listadoPonentes.firstChild) {\r\n                listadoPonentes.removeChild(listadoPonentes.firstChild);\r\n            }\r\n\r\n\r\n\r\n            if(ponentesFiltrados.length > 0) {\r\n                ponentesFiltrados.forEach(ponente => {\r\n                    const ponenteHTML = document.createElement('LI');\r\n                    ponenteHTML.classList.add('listado-ponentes__ponente');\r\n                    ponenteHTML.textContent = ponente.nombre;\r\n                    ponenteHTML.dataset.ponenteId = ponente.id;\r\n\r\n                    ponenteHTML.onclick = seleccionarPonente;\r\n\r\n                    // Añadir al DOM\r\n                    listadoPonentes.appendChild(ponenteHTML);\r\n                })\r\n            } else {\r\n                if(ponentesInput.value.length >=3) {\r\n                    const noEncontrado = document.createElement('P');\r\n                    noEncontrado.classList.add('listado-ponentes__no-encontrado');\r\n                    noEncontrado.textContent = 'No hay resultados para tu búsqueda';\r\n                    listadoPonentes.appendChild(noEncontrado);\r\n                }\r\n                ponenteHidden.value = \"\";           //IMPORTANTE\r\n            }\r\n        }\r\n\r\n        function seleccionarPonente(evento) {\r\n\r\n            // Seleccionar el ponente\r\n            const ponente = evento.target;\r\n\r\n            // Deseleccionar la clase previa\r\n            const ponentePrevio = document.querySelector('.listado-ponentes__ponente--seleccionado');\r\n            if(ponentePrevio) {\r\n                ponentePrevio.classList.remove(\"listado-ponentes__ponente--seleccionado\");\r\n            }\r\n\r\n            // Añadir la clase de seleccionado\r\n            ponente.classList.add('listado-ponentes__ponente--seleccionado');\r\n\r\n            ponenteHidden.value = ponente.dataset.ponenteId;\r\n        }\r\n    }\r\n})();","(function () {\r\n\r\n    const tagsInput = document.querySelector('#tags_input');\r\n\r\n    if(tagsInput) {\r\n\r\n        const tagsDiv = document.querySelector(\"#tags\");\r\n        const tagsInputHidden = document.querySelector(\"[name=tags]\");\r\n\r\n        let tags = [];\r\n\r\n        // Recuperar del Input Oculto\r\n        if(tagsInputHidden.value !== \"\") {\r\n            tags = tagsInputHidden.value.split(\",\");\r\n            mostrarTags();\r\n        }\r\n\r\n        // Escuchar los cambios en el input\r\n        tagsInput.addEventListener('keypress', guardarTag);\r\n\r\n        function guardarTag(evento) {\r\n\r\n            if(evento.keyCode === 44) {\r\n\r\n                // Evitar que se agreguen tags repetidos y vacios\r\n                if(evento.target.value.trim() === \"\" || evento.target.value < 1 || tags.includes(evento.target.value.toLowerCase())) {\r\n                    evento.preventDefault();\r\n                    evento.target.value = \"\";\r\n                    return;\r\n                }\r\n\r\n                evento.preventDefault();\r\n\r\n                tags = [...tags, evento.target.value.trim()];\r\n\r\n                tagsInput.value = \"\";\r\n\r\n                //console.log(tags)\r\n                mostrarTags();\r\n            }\r\n        }\r\n\r\n        function mostrarTags() {\r\n            tagsDiv.textContent = \"\";\r\n\r\n            tags.forEach(tag => {\r\n                const etiqueta = document.createElement(\"LI\");\r\n                etiqueta.classList.add(\"formulario__tag\");\r\n                etiqueta.textContent  = tag;\r\n                etiqueta.onclick = eliminarTag;\r\n                tagsDiv.appendChild(etiqueta);\r\n            });\r\n            actualizarInputHidden();\r\n        }\r\n\r\n        function eliminarTag(evento) {\r\n            const tagEliminar = evento.target.textContent.trim();\r\n\r\n            tags = tags.filter(tag => tag !== tagEliminar);\r\n\r\n            mostrarTags(); // Mostrar de nuevo las etiquetas después de eliminar\r\n\r\n            // Si deseas ver el estado actual de los tags en la consola, descomenta la siguiente línea:\r\n            // console.log(tags);\r\n        }\r\n\r\n        function actualizarInputHidden() {\r\n            tagsInputHidden.value = tags.join(\",\");\r\n        }\r\n    }\r\n})()"]}