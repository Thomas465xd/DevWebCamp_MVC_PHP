{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","addEventListener","terminoBusqueda","forEach","dia","busqueda","categoria_id","value","Object","values","includes","async","busquedaEventos","id","horaSeleccionada","classList","remove","add","iniciarApp","evento","target","name","horaPrevia","url","resultado","fetch","eventos","listadoHoras","li","horasTomadas","map","hora_id","listadoHorasArray","Array","from","filter","dataset","horaId","horasDisponibles","horasNoDisponibles","hora","removeEventListener","seleccionarHora","obtenerHorasDisponibles","json","error","console","ponentesInput","ponentes","ponentesFiltrados","listadoPonentes","ponenteHidden","seleccionarPonente","ponente","ponentePrevio","ponenteId","respuesta","arrayPonentes","nombre","trim","apellido","formatearPonentes","obtenerPonentes","length","busquedaNormalizada","normalize","replace","toLowerCase","expresion","RegExp","search","firstChild","removeChild","ponenteHTML","createElement","textContent","onclick","appendChild","noEncontrado","mostrarPonentes","obtenerPonente","ponenteDOM","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","tag","etiqueta","eliminarTag","join","tagEliminar","split","keyCode","preventDefault"],"mappings":"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","file":"bundle.js","sourcesContent":["(function() {\r\n    const horas = document.querySelector(\"#horas\");\r\n\r\n    if (horas) {\r\n        const categoria = document.querySelector('[name=\"categoria_id\"]');\r\n        const dias = document.querySelectorAll('[name=\"dia\"]');\r\n        const inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\r\n        const inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\r\n\r\n        \r\n        categoria.addEventListener(\"change\", terminoBusqueda);\r\n        dias.forEach(dia => dia.addEventListener(\"change\", terminoBusqueda));\r\n        \r\n        let busqueda = {\r\n            categoria_id: +categoria.value || '',\r\n            dia: +inputHiddenDia.value || ''\r\n        }\r\n\r\n        // Verifica que ambos valores de búsqueda estén completos\r\n        if (!Object.values(busqueda).includes('')) {\r\n\r\n            async function iniciarApp() {\r\n                //console.log(\"Contienen Datos\");\r\n                await busquedaEventos();\r\n    \r\n                const id = inputHiddenHora.value;\r\n    \r\n                // Resaltar la hora actual\r\n                const horaSeleccionada = document.querySelector(`[data-hora-id=\"${id}\"]`);\r\n    \r\n                horaSeleccionada.classList.remove(\"horas__hora--deshabilitada\");\r\n                horaSeleccionada.classList.add(\"horas__hora--seleccionada\");\r\n            }\r\n\r\n            iniciarApp();\r\n        }\r\n\r\n        function terminoBusqueda(evento) {\r\n            busqueda[evento.target.name] = evento.target.value;\r\n\r\n            // Reiniciar campos ocultos y el selector de hjoras\r\n            inputHiddenHora.value = \"\";\r\n            inputHiddenDia.value = \"\";\r\n\r\n            // Deseleccionar la hora previa, si hay un nuevo click\r\n            const horaPrevia = document.querySelector(\".horas__hora--seleccionada\");\r\n\r\n            if (horaPrevia) {\r\n                horaPrevia.classList.remove(\"horas__hora--seleccionada\");\r\n            }\r\n\r\n            // Verifica que ambos valores de búsqueda estén completos\r\n            if (Object.values(busqueda).includes('')) {\r\n                //console.log(\"Faltan datos\");\r\n                return;\r\n            }\r\n\r\n            //console.log(busqueda);\r\n\r\n            busquedaEventos();\r\n        }\r\n\r\n        async function busquedaEventos() {\r\n            const { dia, categoria_id } = busqueda;\r\n            const url = `/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`;\r\n\r\n            //console.log(url);\r\n\r\n            try {\r\n                const resultado = await fetch(url);\r\n                const eventos = await resultado.json();\r\n\r\n                //console.log(eventos);\r\n\r\n                obtenerHorasDisponibles(eventos);\r\n            } catch (error) {\r\n                console.error('Error al obtener eventos:', error);\r\n            }\r\n        }\r\n\r\n        function obtenerHorasDisponibles(eventos) {\r\n\r\n            // Reiniciar las horas\r\n            const listadoHoras = document.querySelectorAll(\"#horas li\");\r\n            listadoHoras.forEach(li => li.classList.add(\"horas__hora--deshabilitada\"));\r\n\r\n\r\n            // Comprobar eventos ya tomados\r\n            const horasTomadas = eventos.map(evento => evento.hora_id);\r\n            const listadoHorasArray = Array.from(listadoHoras);\r\n\r\n            // habilitar solo las horas disponibles\r\n            const resultado = listadoHorasArray.filter(li => !horasTomadas.includes(li.dataset.horaId));\r\n            resultado.forEach(li => li.classList.remove(\"horas__hora--deshabilitada\"));\r\n\r\n            //console.log(resultado);\r\n            //console.log(listadoHoras)\r\n            //console.log(horasTomadas);\r\n\r\n            const horasDisponibles = document.querySelectorAll(\"#horas li:not(.horas__hora--deshabilitada)\");\r\n\r\n            const horasNoDisponibles = document.querySelectorAll('.horas__hora--deshabilitada');\r\n            Array.from(horasNoDisponibles).map(hora => {\r\n                hora.removeEventListener('click', seleccionarHora);\r\n            })  \r\n\r\n            horasDisponibles.forEach(hora => hora.addEventListener(\"click\", seleccionarHora));\r\n        }\r\n\r\n        function seleccionarHora(evento) {\r\n            // Deseleccionar la hora previa, si hay un nuevo click\r\n            const horaPrevia = document.querySelector(\".horas__hora--seleccionada\");\r\n            if (horaPrevia) {\r\n                horaPrevia.classList.remove(\"horas__hora--seleccionada\");\r\n            }\r\n\r\n            // Agregar clase de seleccionado\r\n            evento.target.classList.add(\"horas__hora--seleccionada\");\r\n\r\n            inputHiddenHora.value = evento.target.dataset.horaId;\r\n            //console.log(evento.target.dataset.horaId);\r\n\r\n            // Llenar el campo oculto de día\r\n            inputHiddenDia.value = document.querySelector('[name=\"dia\"]:checked').value;\r\n        }\r\n    }\r\n})();\r\n","(function() {\r\n    const ponentesInput = document.querySelector('#ponentes');\r\n\r\n    if(ponentesInput) {\r\n        let ponentes = [];\r\n        let ponentesFiltrados = [];\r\n\r\n        const listadoPonentes = document.querySelector('#listado-ponentes');\r\n        const ponenteHidden = document.querySelector('[name=\"ponente_id\"]');\r\n\r\n        obtenerPonentes();\r\n        ponentesInput.addEventListener(\"input\", buscarPonentes);\r\n\r\n        if(ponenteHidden.value) {\r\n            (async () => {\r\n                const ponente = await obtenerPonente(ponenteHidden.value);\r\n\r\n                const { nombre, apellido } = ponente;\r\n\r\n                // Insertar en el HTML\r\n                const ponenteDOM = document.createElement(\"LI\");\r\n                ponenteDOM.classList.add(\"listado-ponentes__ponente\", \"listado-ponentes__ponente--seleccionado\");\r\n                ponenteDOM.textContent = `${nombre} ${apellido}`;\r\n\r\n                // Inyectar en el HTML\r\n                listadoPonentes.appendChild(ponenteDOM);\r\n            })();\r\n        }\r\n        \r\n        async function obtenerPonentes() {\r\n            const url = `/api/ponentes`;\r\n\r\n            const respuesta = await fetch(url);\r\n            const resultado = await respuesta.json();\r\n\r\n            //console.log(resultado);\r\n            formatearPonentes(resultado);\r\n        }\r\n\r\n        async function obtenerPonente(id) {\r\n            const url = `/api/ponente?id=${id}`;\r\n            const respuesta = await fetch(url);\r\n            const resultado = await respuesta.json();\r\n\r\n            return resultado;\r\n        }\r\n\r\n        function formatearPonentes(arrayPonentes = []) {\r\n            ponentes = arrayPonentes.map(ponente => {\r\n                return {\r\n                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`,\r\n                    id: ponente.id\r\n                }\r\n            })\r\n\r\n            //console.log(ponentes) \r\n        }\r\n\r\n        function buscarPonentes(evento) {\r\n            const busqueda = evento.target.value;\r\n            //console.log(evento.target.value);\r\n\r\n            if(busqueda.length > 3) {\r\n\r\n                // Normalizar la búsqueda y eliminar las marcas diacríticas\r\n                const busquedaNormalizada = busqueda.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n                const expresion = new RegExp(busquedaNormalizada, 'i');\r\n\r\n                ponentesFiltrados = ponentes.filter(ponente => {\r\n                    const nombreNormalizado = ponente.nombre.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n                    if(nombreNormalizado.search(expresion) !== -1) {\r\n                        return ponente;\r\n                    }\r\n\r\n                    //console.log(ponentesFiltrados);\r\n                })\r\n            } else {\r\n                ponentesFiltrados = [];\r\n            }\r\n\r\n            mostrarPonentes();\r\n        }\r\n\r\n        function mostrarPonentes() {\r\n\r\n            //Mala solucion\r\n            //listadoPonentes.innerHTML = '';\r\n\r\n            while(listadoPonentes.firstChild) {\r\n                listadoPonentes.removeChild(listadoPonentes.firstChild);\r\n            }\r\n\r\n\r\n\r\n            if(ponentesFiltrados.length > 0) {\r\n                ponentesFiltrados.forEach(ponente => {\r\n                    const ponenteHTML = document.createElement('LI');\r\n                    ponenteHTML.classList.add('listado-ponentes__ponente');\r\n                    ponenteHTML.textContent = ponente.nombre;\r\n                    ponenteHTML.dataset.ponenteId = ponente.id;\r\n\r\n                    ponenteHTML.onclick = seleccionarPonente;\r\n\r\n                    // Añadir al DOM\r\n                    listadoPonentes.appendChild(ponenteHTML);\r\n                })\r\n            } else {\r\n                if(ponentesInput.value.length >=3) {\r\n                    const noEncontrado = document.createElement('P');\r\n                    noEncontrado.classList.add('listado-ponentes__no-encontrado');\r\n                    noEncontrado.textContent = 'No hay resultados para tu búsqueda';\r\n                    listadoPonentes.appendChild(noEncontrado);\r\n                }\r\n                ponenteHidden.value = \"\";           //IMPORTANTE\r\n            }\r\n        }\r\n\r\n        function seleccionarPonente(evento) {\r\n\r\n            // Seleccionar el ponente\r\n            const ponente = evento.target;\r\n\r\n            // Deseleccionar la clase previa\r\n            const ponentePrevio = document.querySelector('.listado-ponentes__ponente--seleccionado');\r\n            if(ponentePrevio) {\r\n                ponentePrevio.classList.remove(\"listado-ponentes__ponente--seleccionado\");\r\n            }\r\n\r\n            // Añadir la clase de seleccionado\r\n            ponente.classList.add('listado-ponentes__ponente--seleccionado');\r\n\r\n            ponenteHidden.value = ponente.dataset.ponenteId;\r\n        }\r\n    }\r\n})();","(function () {\r\n\r\n    const tagsInput = document.querySelector('#tags_input');\r\n\r\n    if(tagsInput) {\r\n\r\n        const tagsDiv = document.querySelector(\"#tags\");\r\n        const tagsInputHidden = document.querySelector(\"[name=tags]\");\r\n\r\n        let tags = [];\r\n\r\n        // Recuperar del Input Oculto\r\n        if(tagsInputHidden.value !== \"\") {\r\n            tags = tagsInputHidden.value.split(\",\");\r\n            mostrarTags();\r\n        }\r\n\r\n        // Escuchar los cambios en el input\r\n        tagsInput.addEventListener('keypress', guardarTag);\r\n\r\n        function guardarTag(evento) {\r\n\r\n            if(evento.keyCode === 44) {\r\n\r\n                // Evitar que se agreguen tags repetidos y vacios\r\n                if(evento.target.value.trim() === \"\" || evento.target.value < 1 || tags.includes(evento.target.value.toLowerCase())) {\r\n                    evento.preventDefault();\r\n                    evento.target.value = \"\";\r\n                    return;\r\n                }\r\n\r\n                evento.preventDefault();\r\n\r\n                tags = [...tags, evento.target.value.trim()];\r\n\r\n                tagsInput.value = \"\";\r\n\r\n                //console.log(tags)\r\n                mostrarTags();\r\n            }\r\n        }\r\n\r\n        function mostrarTags() {\r\n            tagsDiv.textContent = \"\";\r\n\r\n            tags.forEach(tag => {\r\n                const etiqueta = document.createElement(\"LI\");\r\n                etiqueta.classList.add(\"formulario__tag\");\r\n                etiqueta.textContent  = tag;\r\n                etiqueta.onclick = eliminarTag;\r\n                tagsDiv.appendChild(etiqueta);\r\n            });\r\n            actualizarInputHidden();\r\n        }\r\n\r\n        function eliminarTag(evento) {\r\n            const tagEliminar = evento.target.textContent.trim();\r\n\r\n            tags = tags.filter(tag => tag !== tagEliminar);\r\n\r\n            mostrarTags(); // Mostrar de nuevo las etiquetas después de eliminar\r\n\r\n            // Si deseas ver el estado actual de los tags en la consola, descomenta la siguiente línea:\r\n            // console.log(tags);\r\n        }\r\n\r\n        function actualizarInputHidden() {\r\n            tagsInputHidden.value = tags.join(\",\");\r\n        }\r\n    }\r\n})()"]}